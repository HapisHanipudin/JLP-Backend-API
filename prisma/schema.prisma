generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(uuid())
  slug        String   @unique
  display     String
  bannerUrl   String
  description String
  vendors     Vendor[]
}

model User {
  id           String         @id @default(uuid())
  name         String?
  email        String         @unique
  createdAt    DateTime       @default(now())
  password     String
  profileImage String?
  updatedAt    DateTime       @updatedAt
  username     String         @unique
  vendorId     String?
  phone        Int?
  userCart     Cart[]
  News         News[]
  orders       Order[]
  refreshToken RefreshToken[]
  comments     Reviews[]
  Vendor       Vendor?        @relation(fields: [vendorId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Vendor {
  id           String         @id @default(uuid())
  name         String
  slug         String         @unique
  categoryId   String
  address      String
  openingHours String
  closingHours String
  description  String
  gmapsUrl     String
  iconUrl      String
  NIK          Int?
  NPWP         Int?
  BankCode     Int?
  BankAccount  Int?
  updatedAt    DateTime       @updatedAt
  createdAt    DateTime       @default(now())
  contacts     Contact[]
  products     Product[]
  reviews      Reviews[]
  User         User[]
  category     Category       @relation(fields: [categoryId], references: [id])
  banners      VendorBanner[]
  profitSplits ProfitSplit? // Relasi ke profit split per vendor
  donations    Donation[] // Relasi ke donasi
  incomes      Income[] // Relasi ke tabel pemasukan
  withdrawals  Withdrawal[] // Relasi ke tabel pencairan
}

model Income {
  id        String   @id @default(uuid())
  vendorId  String
  amount    Int // Jumlah pemasukan
  source    String // Sumber pemasukan (misalnya, "order")
  createdAt DateTime @default(now()) // Tanggal pemasukan
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
}

model Withdrawal {
  id          String           @id @default(uuid())
  vendorId    String
  amount      Int // Jumlah dana yang diminta untuk pencairan
  status      WithdrawalStatus @default(PENDING) // Status pencairan
  requestedAt DateTime         @default(now()) // Tanggal permintaan pencairan
  approvedAt  DateTime? // Tanggal persetujuan pencairan, opsional
  vendor      Vendor           @relation(fields: [vendorId], references: [id])
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
}

model VendorBanner {
  id       String @id @default(uuid())
  vendorId String
  imageUrl String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
}

model Product {
  id          String      @id @default(uuid())
  name        String
  imageUrl    String
  vendorId    String
  price       Int
  description String
  Cart        Cart[]
  order       OrderItem[]
  vendor      Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Contact {
  id       String @id @default(uuid())
  vendorId String
  type     String
  info     String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
}

model News {
  id        String   @id @default(uuid())
  AuthorId  String
  title     String
  slug      String   @unique
  image_url String
  video_url String?
  content   String
  createdAt DateTime @default(now())
  Author    User     @relation(fields: [AuthorId], references: [id])
}

model Reviews {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  vendorId  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  owner     User     @relation(fields: [userId], references: [id])
}

model Order {
  id          String      @id @default(dbgenerated("concat('JLP-', lpad((nextval('order_seq'::regclass))::text, 4, '0'::text), '-', to_char((CURRENT_DATE)::timestamp with time zone, 'DDMMYYYY'::text))"))
  userId      String
  status      orderStatus @default(PENDING)
  totalAmount Int
  paymentUrl  String?
  snapToken   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  donation    Donation? // Relasi opsional ke donasi
}

model OrderItem {
  id         String     @id @default(uuid())
  orderId    String
  productId  String
  quantity   Int
  price      Int
  status     ItemStatus @default(PENDING)
  totalPrice Int
  note       String?
  order      Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id])

  @@index([orderId])
}

enum orderStatus {
  PENDING
  PAID
  PROCESS
  COMPLETED
  CANCELLED
  FAILED
}

enum ItemStatus {
  PENDING
  PAID
  PROCESS
  SENT
  ARRIVED
  REJECTED
  COMPLETED
  CANCELLED
  FAILED
}

model ProfitSplit {
  id                  String @id @default(uuid())
  vendorId            String @unique // Vendor terkait
  percentageVendor    Float // Persentase untuk vendor (contoh: 0.99 untuk 99%)
  percentagePalestine Float // Persentase untuk Palestina (contoh: 0.01 untuk 1%)
  vendor              Vendor @relation(fields: [vendorId], references: [id])
}

model Donation {
  id        String   @id @default(uuid())
  orderId   String   @unique
  vendorId  String // Vendor terkait
  amount    Int // Jumlah donasi dalam bentuk nominal
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
}
