// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      String   @id @default(uuid())
  slug    String   @unique
  display String
  vendors Vendor[]
}

model User {
  id           String         @id @default(uuid())
  name         String?
  email        String         @unique
  createdAt    DateTime       @default(now())
  password     String
  profileImage String?
  updatedAt    DateTime       @updatedAt
  username     String         @unique
  vendorToken  String? // Menjadikan vendorToken opsional
  vendor       Vendor?        @relation(fields: [vendorToken], references: [id])
  refreshToken RefreshToken[]
  News         News[]
  userCart     Cart[]
  comments     Reviews[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Vendor {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  categoryId  String
  address     String
  workHours   String
  description String
  gmapsUrl    String
  iconUrl     String
  category    Category       @relation(fields: [categoryId], references: [id])
  products    Product[]
  banners     VendorBanner[]
  contacts    Contact[]
  User        User[]
  reviews     Reviews[]
  createdAt   DateTime       @default(now())
}

model VendorBanner {
  id       String @id @default(uuid())
  vendorId String
  imageUrl String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
}

model Product {
  id          String  @id @default(uuid())
  name        String
  imageUrl    String
  vendorId    String
  price       Int
  description String
  vendor      Vendor? @relation(fields: [vendorId], references: [id])
  Cart        Cart[]
}

model Contact {
  id       String @id @default(uuid())
  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  type     String
  info     String
}

model News {
  id        String   @id @default(uuid())
  AuthorId  String
  Author    User     @relation(fields: [AuthorId], references: [id])
  title     String
  slug      String   @unique
  image_url String
  video_url String?
  content   String
  createdAt DateTime @default(now())
}

model Reviews {
  id        String   @id @default(uuid())
  stars     Decimal
  userId    String
  comment   String
  vendorId  String
  user      User     @relation(fields: [userId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  createdAt DateTime @default(now())
}

model Cart {
  id        String  @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  note      String
  owner     User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
