generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      String   @id @default(uuid())
  slug    String   @unique
  display String
  vendors Vendor[]
}

model User {
  id           String         @id @default(uuid())
  name         String?
  email        String         @unique
  createdAt    DateTime       @default(now())
  password     String
  profileImage String?
  updatedAt    DateTime       @updatedAt
  username     String         @unique
  vendorToken  String?
  userCart     Cart[]
  News         News[]
  refreshToken RefreshToken[]
  comments     Reviews[]
  orders       Order[]
  vendor       Vendor?        @relation(fields: [vendorToken], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Vendor {
  id           String         @id @default(uuid())
  name         String
  slug         String         @unique
  categoryId   String
  address      String
  openingHours String
  closingHours String
  description  String
  gmapsUrl     String
  iconUrl      String
  createdAt    DateTime       @default(now())
  contacts     Contact[]
  products     Product[]
  reviews      Reviews[]
  User         User[]
  category     Category       @relation(fields: [categoryId], references: [id])
  banners      VendorBanner[]
}

model VendorBanner {
  id       String @id @default(uuid())
  vendorId String
  imageUrl String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
}

model Product {
  id          String @id @default(uuid())
  name        String
  imageUrl    String
  vendorId    String
  price       Int
  description String
  Cart        Cart[]
  order OrderItem[]
  vendor      Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Contact {
  id       String @id @default(uuid())
  vendorId String
  type     String
  info     String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
}

model News {
  id        String   @id @default(uuid())
  AuthorId  String
  title     String
  slug      String   @unique
  image_url String
  video_url String?
  content   String
  createdAt DateTime @default(now())
  Author    User     @relation(fields: [AuthorId], references: [id])
}

model Reviews {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  vendorId  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  vendor    Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  owner     User     @relation(fields: [userId], references: [id])
}

model Order {
  id String @id @default(uuid())
  userId String
  status  orderStatus
  totalAmount Int
  paymentUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner User @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  productId String
  quantity Int
  price Int
  totalPrice Int
  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum orderStatus {
  PENDING
  PAID
  PROCESS
  COMPLETED
  CANCELLED
}